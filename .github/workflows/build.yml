name: CI/CD Pipeline

on:
  # Trigger on push to the main branch
  push:
    branches:
      - main

jobs:
  # Test job
  tests:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - uses: actions/checkout@v1

      # Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      # Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Run tests
      - name: Run Tests
        run: mvn -B test

  # Build job
  build:
    needs: tests
    name: Build
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - uses: actions/checkout@v1

      # Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      # Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Build the project with Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

      # Upload artifact (JAR file)
      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: jar-artifact
          path: target/data-0.0.1-SNAPSHOT.jar

  # Deploy job
  deploy:
    needs: build  # Ensure build is done before deployment
    name: Deploy to Render
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository again (required in the deploy job)
      - name: Check out the repository
        uses: actions/checkout@v2

      # Download the JAR file artifact from the build job
      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: jar-artifact
          path: target  # This will download the JAR into the target directory

      # Install Render CLI and dependencies
      - name: Install Node.js and Render CLI
        run: |
          curl -sL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo apt-get install -y nodejs
          npm install -g render-cli
      # Verify Render CLI installation
      - name: Verify Render CLI Installation
        run: render --version

      # Deploy to Render using the JAR file
      - name: Deploy to Render using API
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}  # Use the secret API key
        run: |
          curl -X POST https://api.render.com/v1/services/srv-ct5afg9u0jms73acse6g/deployments \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -F "file=@target/data-0.0.1-SNAPSHOT.jar" \
            -F "branch=main" \
            -F "commit=${{ github.sha }}"